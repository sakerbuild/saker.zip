global(VERSION_saker.zip) = "0.8.4"

global(saker.zip_DEPENDENCIES) = [
	saker.standard,
]

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile(
	out javac,
){
	$javac = saker.java.compile(
		SourceDirectories: [
			main/src/main/,
			api/src/main/,
			impl/src/main/,
		],
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.build-api-v{ static(VERSION_saker.build) }",
				"saker.nest-api-v{ static(VERSION_saker.nest) }"
			]),
			saker.java.classpath.bundle(nest.dependency.resolve(
				Bundles: global(saker.zip_DEPENDENCIES),
				Filters: nest.dependency.filter.compile(CompileTransitive: false)
			)),
		],
		Identifier: saker.zip,
	)
}
export(
	out compile = compile(),
	out mainjar,
	out apijar,
	out impljar,
	out sourcejar,
	
	out bundlepaths = [
		$mainjar[Path],
		$apijar[Path],
		$impljar[Path],
		$sourcejar[Path],
	]
){
	$mainjar = saker.jar.create(
		Output: saker.zip.jar,
		Resources: [
			{
				Directory: main/resources,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/zip/main/**,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.zip-v{ global(VERSION_saker.zip) }",
				Nest-Bundle-Source: "saker.zip-sources-v{ global(VERSION_saker.zip) }",
			},
		},
	)
	$apijar = saker.jar.create(
		Output: saker.zip-api.jar,
		Resources: [
			{
				Directory: api/resources,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/zip/api/**,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.zip-api-v{ global(VERSION_saker.zip) }",
				Nest-Bundle-Source: "saker.zip-sources-v{ global(VERSION_saker.zip) }",
			},
		},
	)
	$impljar = saker.jar.create(
		Output: saker.zip-impl.jar,
		Resources: [
			{
				Directory: impl/resources,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/zip/impl/**,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.zip-impl-v{ global(VERSION_saker.zip) }",
				Nest-Bundle-Source: "saker.zip-sources-v{ global(VERSION_saker.zip) }",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: saker.zip-sources.jar,
		Resources: [
			{
				Directory:  [
					main/src/main/,
					api/src/main/,
					impl/src/main/,
				],
				Resources: **/*.java,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.zip-sources-v{ global(VERSION_saker.zip) }",
			},
		},
	)
}
install(
	out export = export()
){
	nest.local.install($export[bundlepaths])
}

compile_testutils(
	out instrumentedjar
	out testutilscompile
) {
	$instrumentedjar = nest.test.instrument(
		nest.bundle.download("saker.build-test-v{ static(VERSION_saker.build) }")[BundlePaths][0],
		NestVersion: static(VERSION_saker.nest),
	)
	
	$testutilscompile = saker.java.compile(
		SourceDirectories: main/src/test_utils/,
		ClassPath: [
			$instrumentedjar,
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			]),
		]
		Identifier: saker.zip.test_utils,
	)
}
test(){
	$export = export()
	$mainjar = $export[mainjar][Path]
	
	$compile_testutils = compile_testutils()
	$instrumentedjar = $compile_testutils[instrumentedjar]
	$testutilscompile = $compile_testutils[testutilscompile]
	
	$testcompile = saker.java.compile(
		SourceDirectories: main/src/test/,
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}"
			]),
			$testutilscompile
		],
		Identifier: saker.zip.tests,
	)
	
	$resolveddependencies = nest.dependency.resolve(
		Bundles: global(saker.zip_DEPENDENCIES),
		Filters: nest.dependency.filter.kind(classpath)
	)
	
	saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$instrumentedjar,
		],
		DependencyClassPath: [
			$export[compile][javac],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath:	[
			$testutilscompile[ClassDirectory],
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}",
			]),
		],
		TestClasses: [
			testing.saker.zip.tasks.**.*Test
		],
		NonDeterministicTests: [
			**,
		],
		TestClassParameters: {
			**: {
				RepositoryJarPath: nest.bundle.localize("saker.nest-test-v{ static(VERSION_saker.nest) }")[BundleLocalPaths][0],
				RepositoryParameterBundles: "{ 
						foreach $path in $export[bundlepaths]: "{ std.file.mirror($path) };"  
					};{
						foreach $path in nest.bundle.localize($resolveddependencies)[BundleLocalPaths]: ";{ $path }"
					}",
			}
		},
		TestInvokerParameters: {
			SakerJarPath: std.file.mirror($instrumentedjar),
			TimeoutMillis: 120000,
			TestsBaseBuildDirectory: std.file.mirror.path(std.file.place(test/build)),
		},
		WorkingDirectory: main,
		IgnoreFileChanges: [
			std.file.place(test/build),
		],
		ProcessJVMParameters: [ 
			#"-agentlib:jdwp=transport=dt_socket,address=localhost:5432,server=y,suspend=y,quiet=y"
			"-Xverify:all" # due to a crash that we encountered: fatal error: Illegal class file encountered. Try running with -Xverify:all in method createDirectories
		],
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}
test_direct() {
	$export = export()
	$mainjar = $export[mainjar][Path]
	
	$compile_testutils = compile_testutils()
	$instrumentedjar = $compile_testutils[instrumentedjar]
	$testutilscompile = $compile_testutils[testutilscompile]
	
	$directtestcompile = saker.java.compile(
		SourceDirectories: main/src/direct_test/,
		ClassPath: [
			$testutilscompile
			$export[compile][javac]
		],
		Identifier: saker.zip.direct_tests,
	)
	
	$resolveddependencies = nest.dependency.resolve(
		Bundles: global(saker.zip_DEPENDENCIES),
		Filters: nest.dependency.filter.kind(classpath)
	)
	
	saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$export[compile][javac][ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-v{ static(VERSION_saker.build) }",
			] + foreach $bundle in $resolveddependencies[Bundles] : [$bundle[BundleIdentifier]]),
		],
		DependencyClassPath: [
			$export[compile][javac],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath:	[
			$testutilscompile[ClassDirectory],
			$directtestcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			]),
		],
		TestClasses: [
			testing.saker.zip.direct.**.*Test
		],
		NonDeterministicTests: [
			**,
		],
		TestInvokerParameters: {
			TimeoutMillis: 120000,
		},
		WorkingDirectory: main,
		IgnoreFileChanges: [
			std.file.place(test/build),
		],
		ProcessJVMParameters: [ 
			#"-agentlib:jdwp=transport=dt_socket,address=localhost:5432,server=y,suspend=y,quiet=y"
			"-Xverify:all" # due to a crash that we encountered: fatal error: Illegal class file encountered. Try running with -Xverify:all in method createDirectories
		],
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)

}

testboth {
	test()
	test_direct()
}